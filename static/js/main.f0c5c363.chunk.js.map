{"version":3,"sources":["components/wireframe-6/data.js","components/wireframe-6/wireframe-6.component.jsx","components/layout/layout.component.jsx","App.js","serviceWorker.js","index.js"],"names":["data","Content","Layout","Wireframe6","columns","title","dataIndex","key","render","text","row","thisMonth","lastMonth","LineOutlined","style","color","ArrowDownOutlined","ArrowUpOutlined","className","display","justifyContent","value","needleColor","needleTransitionDuration","needleTransition","width","height","dataSource","footer","border","Header","Sider","LayoutComponent","state","collapsed","toggle","setState","trigger","collapsible","theme","mode","defaultSelectedKeys","Item","padding","React","createElement","this","MenuUnfoldOutlined","MenuFoldOutlined","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f0c5c363.chunk.js","sourcesContent":["export const data = [\n  {\n    \"key\": \"1\",\n    \"keyMatrics\": \"AVERAGE DEX SIZE\",\n    \"thisMonth\": 32,\n    \"lastMonth\": 32\n  },\n  {\n    \"key\": \"2\",\n    \"keyMatrics\": \"AVERAGE DAYS TO PAYMENT\",\n    \"thisMonth\": 32,\n    \"lastMonth\": 60\n  },\n  {\n    \"key\": \"3\",\n    \"keyMatrics\": \"AVERAGE WIP\",\n    \"thisMonth\": 43,\n    \"lastMonth\": 32\n  },\n  {\n    \"key\": \"4\",\n    \"keyMatrics\": \"AVERAGE DEST.\",\n    \"thisMonth\": 29,\n    \"lastMonth\": 20\n  }\n]\n","import React from \"react\";\nimport ReactSpeedometer from \"react-d3-speedometer\";\nimport { Table, Layout, Row } from \"antd\";\nimport {\n  ArrowUpOutlined,\n  ArrowDownOutlined,\n  LineOutlined\n} from \"@ant-design/icons\";\n\nimport { data } from \"./data\";\n\nconst { Content } = Layout;\nconst Wireframe6 = () => {\n  // table columns\n  const columns = [\n    {\n      title: \"KEY MATRICS\",\n      dataIndex: \"keyMatrics\",\n      key: \"keyMatrics\",\n      render: text => <div>{text}</div>\n    },\n    {\n      title: \"THIS MONTH\",\n      dataIndex: \"thisMonth\",\n      key: \"thisMonth\"\n    },\n    {\n      title: \"LAST MONTH\",\n      dataIndex: \"lastMonth\",\n      key: \"lastMonth\"\n    },\n    {\n      title: \"TREND\",\n      key: \"trends\",\n      dataIndex: \"trends\",\n      render: (text, row) => (\n        <span>\n          {row.thisMonth === row.lastMonth && (\n            <LineOutlined style={{ color: \"grey\" }} />\n          )}\n          {row.thisMonth < row.lastMonth && (\n            <ArrowDownOutlined style={{ color: \"red\" }} />\n          )}\n          {row.thisMonth > row.lastMonth && (\n            <ArrowUpOutlined style={{ color: \"green\" }} />\n          )}\n        </span>\n      )\n    }\n  ];\n  return (\n    <div>\n      <Row>\n        <Content className=\"content\">\n          <div>\n            <h6 className=\"text-underline\">FINANCES</h6>\n            <h6 className=\"text-underline\">HEADLINES</h6>\n          </div>\n        </Content>\n        <Content\n          className=\"content\"\n          style={{ display: \"flex\", justifyContent: \"flex-end\" }}\n        >\n          <div>\n            <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n              <ReactSpeedometer\n                value={500}\n                needleColor=\"steelblue\"\n                needleTransitionDuration={4000}\n                needleTransition=\"easeElastic\"\n                width={200}\n                height={200}\n              />\n            </div>\n            <Table\n              columns={columns}\n              dataSource={data}\n              footer={() => (\n                <span style={{ color: \"green\" }}>KEY SUCCESSES</span>\n              )}\n            />\n          </div>\n        </Content>\n      </Row>\n      <Row>\n        <Content className=\"content\">\n          <div className=\"row p-2\">\n            <h6 className=\"text-underline\">FINANCIAL SUMMARY</h6>\n            <div\n              style={{\n                height: \"300px\",\n                width: \"100%\",\n                border: \"1px solid black\"\n              }}\n            ></div>\n          </div>\n        </Content>\n      </Row>\n    </div>\n  );\n};\n\nexport default Wireframe6;\n","import React from \"react\";\nimport \"./layout.styles.css\";\nimport { Layout, Menu } from \"antd\";\nimport { MenuUnfoldOutlined, MenuFoldOutlined } from \"@ant-design/icons\";\nimport Wireframe6 from \"../wireframe-6/wireframe-6.component\";\n\nconst { Header, Sider } = Layout;\n\nclass LayoutComponent extends React.Component {\n  state = {\n    collapsed: false\n  };\n\n  toggle = () => {\n    this.setState({\n      collapsed: !this.state.collapsed\n    });\n  };\n\n  render() {\n    return (\n      <Layout>\n        <Sider\n          trigger={null}\n          className=\"site-layout-height\"\n          collapsible\n          // collapsed={this.state.collapsed}\n        >\n          <div className=\"logo\">\n            <strong>GLASSWALL</strong>\n          </div>\n          <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={[\"1\"]}>\n            <Menu.Item key=\"1\">\n              <span>Wireframe 6</span>\n            </Menu.Item>\n          </Menu>\n        </Sider>\n        <Layout className=\"site-layout\">\n          <Header className=\"site-layout-background\" style={{ padding: 0 }}>\n            {React.createElement(\n              this.state.collapsed ? MenuUnfoldOutlined : MenuFoldOutlined,\n              {\n                className: \"trigger\",\n                onClick: this.toggle\n              }\n            )}\n          </Header>\n\n          <Wireframe6 />\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\nexport default LayoutComponent;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport LayoutComponent from \"./components/layout/layout.component\";\n\nfunction App() {\n  return <LayoutComponent />\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}